# Deployment folder 
deployment/letsencrypt
deployment/build
deployment/.terraform.lock.hcl
deployment/.terraform


# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a
*.so

# DB files
backup.db
*.db
:memory: # SQLite
memory: # SQLite
*.sqlite:memory # SQLite


# Folders
_obj
_test

# Architecture specific extensions/prefixes
*.[568vq]
[568vq].out

*.cgo1.go
*.cgo2.c
_cgo_defun.c
_cgo_gotypes.go
_cgo_export.*

_testmain.go

*.exe
*.test
*.prof

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below if you want to ignore them)
#vendor/

# IDEs
.idea/
*.iml

# OS-specific files
.DS_Store
Thumbs.db

# Binary
/bin

# Ignore .env files
*.env


# Ignore all temporary directories
/tmp/

# Ignore log files
*.log

# Ignore compiled binary files
*.exe
*.dll
*.so
*.o
*.a

# Operating System generated files
.DS_Store
Thumbs.db


# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
